<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Endre Szabo</title>
    <link>/blog.html</link>
    <description>Recent content on site Endre Szabo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright 2011-2016 Endre Szabo</copyright>
    <lastBuildDate>Tue, 12 Jun 2018 07:20:30 +0000</lastBuildDate>
    
        <atom:link href="/blog/feed/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Defeating CheckPoint VPN Route-All-Traffic Policy Enforcement</title>
      <link>/blog/ebp040_defeating-checkpoint-route-all-traffic-enforcement.html</link>
      <pubDate>Tue, 12 Jun 2018 07:20:30 +0000</pubDate>
      
      <guid>/blog/ebp040_defeating-checkpoint-route-all-traffic-enforcement.html</guid>
      <description>&lt;p&gt;Quite a bit of the enterprises have chosen to use CheckPoint VPN solutions to allow remote access to their corporate networks. This platform is widely used and it&amp;rsquo;s up to the security administrators to create the actual VPN security policies that apply to the connecting clients. Among these security rules, it&amp;rsquo;s very common to enforce all of the client&amp;rsquo;s traffic to go through the tunnel, be it destined to the corporate office or not, like Internet traffic that the corporation has nothing to with. There is even a knowledge base entry on how to set up to &lt;a href=&#34;https://supportcenter.checkpoint.com/supportcenter/portal?eventSubmit_doGoviewsolutiondetails=&amp;amp;solutionid=sk101239&#34;&gt;Route all traffic from Remote Access clients, including internet traffic, through Security Gateway&lt;/a&gt;. On the sad side effect, when these rules apply, it is also impossible to connect to the VPN client itself from the same subnet the client resides on. And this leads to being unable to do SSH reverse port forwards to access corporate resources from outside of this client. However, this would be really useful in my scenario, where the connecting client is a Windows VM on my ArchLinux host, and I&amp;rsquo;d like to access over-the-tunnel corporate unix hosts using the friendly and very convenient to use OpenSSH &lt;em&gt;from&lt;/em&gt; the ArchLinux host and not from the Windows VM using PuTTY or something legacy dumb clients like that.&lt;/p&gt;
&lt;p&gt;Using a netfilter rule with a trick on the ArchLinux host I managed to make easy to use transparent reverse port forwardings that also &amp;ldquo;complies&amp;rdquo; with the security enforcement rules of the VPN client.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux Kernel Martian Source Logs Explained</title>
      <link>/blog/ebp037_martian-source-or-destination-traffic-explained.html</link>
      <pubDate>Thu, 07 Jun 2018 08:39:19 +0000</pubDate>
      
      <guid>/blog/ebp037_martian-source-or-destination-traffic-explained.html</guid>
      <description>Quite a bit of our customers&#39; IT guys happen to misinterpret the real meaning of the martian source traffic logs they see on their gateway hosts.</description>
    </item>
    
    <item>
      <title>ArchZFS companion repo for dependent kernel versions</title>
      <link>/blog/ebp036_archzfs-repo-for-kernels.html</link>
      <pubDate>Thu, 31 May 2018 21:33:58 +0000</pubDate>
      
      <guid>/blog/ebp036_archzfs-repo-for-kernels.html</guid>
      <description>&lt;p&gt;As per the ArchZFS repository README: &amp;lsquo;&amp;lsquo;occasionally the OpenZFS project gets behind on stable support for the latest Linux Kernel release. This means that if Linux 4.15 is released to core, but the latest stable release of OpenZFS does not support Linux 4.15, it is not possible to perform a system update. Sometimes it can take a few days, a few weeks, or a month to release a new stable version of OpenZFS&amp;rsquo;&amp;rsquo;. Based on the good ol&#39; Gentoo memories, you might think that the package manager of this ultramodern distribution surely can handle different kernel versions installed at the same time? Unfortunately, the implementation reality of &lt;code&gt;pacman&lt;/code&gt;, the package manager of ArchLinux follows a different stereotype.&lt;/p&gt;
&lt;p&gt;See my ArchZFS-compatible kernel packages repository that offers a solution for this problem.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shipping logs to the logz.io service</title>
      <link>/blog/ebp023_shipping-logs-to-logz.io-service.html</link>
      <pubDate>Tue, 17 Apr 2018 09:43:18 +0000</pubDate>
      
      <guid>/blog/ebp023_shipping-logs-to-logz.io-service.html</guid>
      <description>&lt;p&gt;Some of you may have heard of &lt;a href=&#34;https://logz.io/&#34;&gt;Logz.io&lt;/a&gt;, a yet-another-company that provides &lt;em&gt;ELK as a Service&lt;/em&gt;. Their marketing is quite good, they have great newsletters, tutorials and webcasts, so I thought to myself to let&amp;rsquo;s check &amp;lsquo;em out. After registration you are taken to the wiki entry that lets you configure your gear to ship your logs logz.io ingest servers. While the wiki looks pretty comprehensive, they evidently missed out the good old Unix player here, &lt;code&gt;syslog-ng&lt;/code&gt;. Seeing configuration guides for all these &amp;ldquo;next-gen&amp;rdquo;, &amp;ldquo;cloud-native&amp;rdquo;, &amp;ldquo;serverless&amp;rdquo; totally hyped piece of craps without mentioning &lt;code&gt;syslog-ng&lt;/code&gt; at all I feel being kinda old school.&lt;/p&gt;
&lt;p&gt;So this post is the missing manual on how to ship logs to logz.io using &lt;code&gt;syslog-ng&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The pdnsapp - part 1</title>
      <link>/blog/ebp005_the-pdnsapp-part1.html.html</link>
      <pubDate>Thu, 09 Jul 2015 05:59:00 +0000</pubDate>
      
      <guid>/blog/ebp005_the-pdnsapp-part1.html.html</guid>
      <description>&lt;p&gt;One of my projects called &lt;code&gt;pdnsapp&lt;/code&gt; is a &lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt; based microframework aimed to help develop DNS based applications, very much like &lt;a href=&#34;http://flask.pocoo.org&#34;&gt;Flask&lt;/a&gt; or &lt;a href=&#34;http://bottlepy.org/&#34;&gt;Bottle&lt;/a&gt; do for HTTP or like &lt;a href=&#34;http://lamsonproject.org/&#34;&gt;Lamson&lt;/a&gt; does with SMTP. Like most of the frameworks of this kind it needs an &amp;lsquo;application server&amp;rsquo; to run. This server for &lt;code&gt;pdnsapp&lt;/code&gt; is currently &lt;a href=&#34;http://www.powerdns.com/&#34;&gt;PowerDNS&lt;/a&gt;. For basic functionality it has no dependencies other than the Python standard libraries.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Thoughts on everyday endiannes</title>
      <link>/blog/ebp004_thoughts-on-everyday-endianness.html</link>
      <pubDate>Fri, 11 Nov 2011 11:11:11 +0000</pubDate>
      
      <guid>/blog/ebp004_thoughts-on-everyday-endianness.html</guid>
      <description>&lt;p&gt;Just a quick note on 11/11/11: I&amp;rsquo;d like to express how awesome big-endian is in all aspects of life. In Hungary we use big-endian for pretty much everything (very much like Japan), eg. representing dates, family and given names and addresses.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nginx as a general purpose TCP proxy</title>
      <link>/blog/ebp006_nginx-as-a-general-purpose-tcp-proxy.html</link>
      <pubDate>Mon, 18 Jul 2011 11:00:18 +0000</pubDate>
      
      <guid>/blog/ebp006_nginx-as-a-general-purpose-tcp-proxy.html</guid>
      <description>Nginx is well known for its powerful HTTP reverse-proxy features. Altough Nginx does its job well in pretty lot of situations, there are always a need for a general TCP proxy stuff. Sadly this feature does not come boundled in with the stock Nginx.
This is where 3rd party patches come in. There are quite some great patches out there, in this post I will write about nginx_tcp_proxy_module made by Weibin Yao from China (he has 13 different promising patches and modules for nginx, definitely worth a check).</description>
    </item>
    
    <item>
      <title>Thoughts on IPv6 Reverse DNS Address Mapping for the masses</title>
      <link>/blog/ebp003_thoughts-on-ipv6-reverse-dns-address-mapping-for-the-masses.html.html</link>
      <pubDate>Tue, 17 May 2011 18:29:00 +0000</pubDate>
      
      <guid>/blog/ebp003_thoughts-on-ipv6-reverse-dns-address-mapping-for-the-masses.html.html</guid>
      <description>&lt;p&gt;Reverse DNS records are good for you. Especially if you run your own SMTP MTAs. Without proper reverse-forward DNS record mapping, some nice anomalies may appear for you. You may have faced the fact some other MTAs shut down your incoming connection for no particular reason. OpenSSH daemon also has the option to check if your forward and reverse DNS entries match. Also, being on IRC with only an IP address is so 90&amp;rsquo;s ;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nginx Alternative Root With Conditional Autoindexing</title>
      <link>/blog/ebp002_nginx-altroot-with-conditional-autoindex.html</link>
      <pubDate>Mon, 02 May 2011 00:00:00 +0000</pubDate>
      
      <guid>/blog/ebp002_nginx-altroot-with-conditional-autoindex.html</guid>
      <description>&lt;p&gt;Recently I have developed the following Nginx setup to make my virtual host instance more advanced. It has the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The blog root directory served from a completely different directory than the regular &lt;code&gt;htdocs&lt;/code&gt; root. Blog content has preference over the other files, so if the requested file is not found in the blog root, it falls back to the regular root.&lt;/li&gt;
&lt;li&gt;There is a feature for conditional autoindexing (I don&amp;rsquo;t like to expse my files by default): if I put a &lt;code&gt;.index&lt;/code&gt; file into a directory, it will be publicly autoindexed, otherwise Nginx returns a 404 error (as instead on the default 403).&lt;/li&gt;
&lt;li&gt;Handles &lt;code&gt;error_page&lt;/code&gt; idoms well.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>WiFi &#43; Ethernet bonding</title>
      <link>/blog/ebp001_wifi-ethernet-bonding.html</link>
      <pubDate>Mon, 24 May 2010 00:00:00 +0000</pubDate>
      
      <guid>/blog/ebp001_wifi-ethernet-bonding.html</guid>
      <description>&lt;p&gt;When I&amp;rsquo;m at home, I &lt;em&gt;dislike&lt;/em&gt; undocking my laptop to move around the house because of the Ethernet-to-WiFi switchover takes long seconds and all my TCP sessions like SSH get lost. It&amp;rsquo;s because my laptop is assigned a different IP address on WiFi and on the wired network even if they belong to the same VLAN. Well, it looks like this is not the case any more.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
